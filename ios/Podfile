# Uncomment this line to define a global platform for your project
platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
  
  # Configure Runner target for xcframework integration
  installer.aggregate_targets.each do |aggregate_target|
    aggregate_target.user_project.targets.each do |target|
      next unless target.name == 'Runner'
      
      target.build_configurations.each do |config|
        # Framework search paths
        config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= ['$(inherited)']
        config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '$(PROJECT_DIR)/Frameworks'
        
        # Link flags for system libraries (fixes DNS resolution symbols)
        config.build_settings['OTHER_LDFLAGS'] ||= ['$(inherited)']
        config.build_settings['OTHER_LDFLAGS'] << '-lresolv'
        
        # Find and link xcframeworks
        frameworks_dir = File.join(File.dirname(__FILE__), 'Frameworks')
        if Dir.exist?(frameworks_dir)
          Dir.glob("#{frameworks_dir}/*.xcframework").each do |xcframework_path|
            framework_name = File.basename(xcframework_path, '.xcframework')
            
            # Add framework to linker flags
            unless config.build_settings['OTHER_LDFLAGS'].any? { |flag| flag.include?(framework_name) }
              config.build_settings['OTHER_LDFLAGS'] << "-framework"
              config.build_settings['OTHER_LDFLAGS'] << framework_name
            end
            
            # Add xcframework files to the project if not already present
            frameworks_group = target.project.main_group.find_subpath('Frameworks', true)
            frameworks_group ||= target.project.main_group.new_group('Frameworks')
            
            framework_ref = frameworks_group.files.find { |f| f.path == File.basename(xcframework_path) }
            unless framework_ref
              framework_ref = frameworks_group.new_file(xcframework_path)
              framework_ref.source_tree = 'SOURCE_ROOT'
              
              # Add to frameworks build phase
              frameworks_build_phase = target.frameworks_build_phase
              build_file = frameworks_build_phase.add_file_reference(framework_ref)
              
              # Add to embed frameworks phase
              embed_frameworks_phase = target.copy_files_build_phases.find { |phase| 
                phase.name == 'Embed Frameworks' 
              }
              
              if embed_frameworks_phase
                embed_build_file = embed_frameworks_phase.add_file_reference(framework_ref)
                embed_build_file.settings = { 'ATTRIBUTES' => ['CodeSignOnCopy', 'RemoveHeadersOnCopy'] }
              end
            end
          end
        end
      end
      
      # Save the project
      target.project.save
    end
  end
end
