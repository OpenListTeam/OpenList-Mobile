// Autogenerated from Pigeon (v26.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class PigeonApiPigeonCodecReader: FlutterStandardReader {
}

private class PigeonApiPigeonCodecWriter: FlutterStandardWriter {
}

private class PigeonApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonApiPigeonCodecWriter(data: data)
  }
}

class PigeonApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonApiPigeonCodec(readerWriter: PigeonApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol AppConfig {
  func isWakeLockEnabled() throws -> Bool
  func setWakeLockEnabled(enabled: Bool) throws
  func isStartAtBootEnabled() throws -> Bool
  func setStartAtBootEnabled(enabled: Bool) throws
  func isAutoCheckUpdateEnabled() throws -> Bool
  func setAutoCheckUpdateEnabled(enabled: Bool) throws
  func isAutoOpenWebPageEnabled() throws -> Bool
  func setAutoOpenWebPageEnabled(enabled: Bool) throws
  func getDataDir() throws -> String
  func setDataDir(dir: String) throws
  func isSilentJumpAppEnabled() throws -> Bool
  func setSilentJumpAppEnabled(enabled: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AppConfigSetup {
  static var codec: FlutterStandardMessageCodec { PigeonApiPigeonCodec.shared }
  /// Sets up an instance of `AppConfig` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: AppConfig?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let isWakeLockEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.isWakeLockEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isWakeLockEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isWakeLockEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isWakeLockEnabledChannel.setMessageHandler(nil)
    }
    let setWakeLockEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.setWakeLockEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setWakeLockEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setWakeLockEnabled(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setWakeLockEnabledChannel.setMessageHandler(nil)
    }
    let isStartAtBootEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.isStartAtBootEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isStartAtBootEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isStartAtBootEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isStartAtBootEnabledChannel.setMessageHandler(nil)
    }
    let setStartAtBootEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.setStartAtBootEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setStartAtBootEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setStartAtBootEnabled(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setStartAtBootEnabledChannel.setMessageHandler(nil)
    }
    let isAutoCheckUpdateEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.isAutoCheckUpdateEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isAutoCheckUpdateEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isAutoCheckUpdateEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isAutoCheckUpdateEnabledChannel.setMessageHandler(nil)
    }
    let setAutoCheckUpdateEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.setAutoCheckUpdateEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAutoCheckUpdateEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setAutoCheckUpdateEnabled(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAutoCheckUpdateEnabledChannel.setMessageHandler(nil)
    }
    let isAutoOpenWebPageEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.isAutoOpenWebPageEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isAutoOpenWebPageEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isAutoOpenWebPageEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isAutoOpenWebPageEnabledChannel.setMessageHandler(nil)
    }
    let setAutoOpenWebPageEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.setAutoOpenWebPageEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAutoOpenWebPageEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setAutoOpenWebPageEnabled(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAutoOpenWebPageEnabledChannel.setMessageHandler(nil)
    }
    let getDataDirChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.getDataDir\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDataDirChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getDataDir()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDataDirChannel.setMessageHandler(nil)
    }
    let setDataDirChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.setDataDir\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDataDirChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let dirArg = args[0] as! String
        do {
          try api.setDataDir(dir: dirArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDataDirChannel.setMessageHandler(nil)
    }
    let isSilentJumpAppEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.isSilentJumpAppEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isSilentJumpAppEnabledChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isSilentJumpAppEnabled()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isSilentJumpAppEnabledChannel.setMessageHandler(nil)
    }
    let setSilentJumpAppEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.AppConfig.setSilentJumpAppEnabled\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSilentJumpAppEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let enabledArg = args[0] as! Bool
        do {
          try api.setSilentJumpAppEnabled(enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSilentJumpAppEnabledChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeCommon {
  func startActivityFromUri(intentUri: String) throws -> Bool
  func getDeviceSdkInt() throws -> Int64
  func getDeviceCPUABI() throws -> String
  func getVersionName() throws -> String
  func getVersionCode() throws -> Int64
  func toast(msg: String) throws
  func longToast(msg: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeCommonSetup {
  static var codec: FlutterStandardMessageCodec { PigeonApiPigeonCodec.shared }
  /// Sets up an instance of `NativeCommon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeCommon?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let startActivityFromUriChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.NativeCommon.startActivityFromUri\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startActivityFromUriChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let intentUriArg = args[0] as! String
        do {
          let result = try api.startActivityFromUri(intentUri: intentUriArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startActivityFromUriChannel.setMessageHandler(nil)
    }
    let getDeviceSdkIntChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.NativeCommon.getDeviceSdkInt\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceSdkIntChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getDeviceSdkInt()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDeviceSdkIntChannel.setMessageHandler(nil)
    }
    let getDeviceCPUABIChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.NativeCommon.getDeviceCPUABI\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceCPUABIChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getDeviceCPUABI()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDeviceCPUABIChannel.setMessageHandler(nil)
    }
    let getVersionNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.NativeCommon.getVersionName\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVersionNameChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getVersionName()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVersionNameChannel.setMessageHandler(nil)
    }
    let getVersionCodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.NativeCommon.getVersionCode\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getVersionCodeChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getVersionCode()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getVersionCodeChannel.setMessageHandler(nil)
    }
    let toastChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.NativeCommon.toast\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      toastChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! String
        do {
          try api.toast(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      toastChannel.setMessageHandler(nil)
    }
    let longToastChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.NativeCommon.longToast\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      longToastChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let msgArg = args[0] as! String
        do {
          try api.longToast(msg: msgArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      longToastChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol Android {
  func addShortcut() throws
  func startService() throws
  func setAdminPwd(pwd: String) throws
  func getOpenListHttpPort() throws -> Int64
  func isRunning() throws -> Bool
  func getOpenListVersion() throws -> String
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class AndroidSetup {
  static var codec: FlutterStandardMessageCodec { PigeonApiPigeonCodec.shared }
  /// Sets up an instance of `Android` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: Android?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let addShortcutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.Android.addShortcut\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addShortcutChannel.setMessageHandler { _, reply in
        do {
          try api.addShortcut()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addShortcutChannel.setMessageHandler(nil)
    }
    let startServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.Android.startService\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startServiceChannel.setMessageHandler { _, reply in
        do {
          try api.startService()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startServiceChannel.setMessageHandler(nil)
    }
    let setAdminPwdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.Android.setAdminPwd\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAdminPwdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pwdArg = args[0] as! String
        do {
          try api.setAdminPwd(pwd: pwdArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAdminPwdChannel.setMessageHandler(nil)
    }
    let getOpenListHttpPortChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.Android.getOpenListHttpPort\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getOpenListHttpPortChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getOpenListHttpPort()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getOpenListHttpPortChannel.setMessageHandler(nil)
    }
    let isRunningChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.Android.isRunning\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isRunningChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isRunning()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isRunningChannel.setMessageHandler(nil)
    }
    let getOpenListVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.openlist_mobile.Android.getOpenListVersion\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getOpenListVersionChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getOpenListVersion()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getOpenListVersionChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol EventProtocol {
  func onServiceStatusChanged(isRunning isRunningArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onServerLog(level levelArg: Int64, time timeArg: String, log logArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class Event: EventProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonApiPigeonCodec {
    return PigeonApiPigeonCodec.shared
  }
  func onServiceStatusChanged(isRunning isRunningArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.openlist_mobile.Event.onServiceStatusChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([isRunningArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
  func onServerLog(level levelArg: Int64, time timeArg: String, log logArg: String, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.openlist_mobile.Event.onServerLog\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([levelArg, timeArg, logArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
