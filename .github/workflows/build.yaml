name: Build

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "*.md"
      - "*.sh"
      - "release.yaml"
  #      - "sync_frp.yaml"
  pull_request:
    branches: ["main"]

  workflow_dispatch:

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.generate.outputs.version_name }}
      openlist_version: ${{ steps.openlist_version.outputs.openlist_version }}
      openlist_git_commit: ${{ steps.openlist_version.outputs.openlist_git_commit }}
      openlist_web_version: ${{ steps.openlist_version.outputs.openlist_web_version }}
      openlist_built_at: ${{ steps.openlist_version.outputs.openlist_built_at }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Version Name
        id: generate
        run: |
          # Generate unified version with timestamp for entire workflow
          BASE_VERSION=$(cat openlist_version)
          TIMESTAMP=$(date +%y%m%d%H)
          VERSION_NAME="${BASE_VERSION}.${TIMESTAMP}"
          echo "version_name=${VERSION_NAME}" >> $GITHUB_OUTPUT
          echo "Generated version: ${VERSION_NAME}"

      - name: Download OpenList Source Code
        run: |
          cd $GITHUB_WORKSPACE/openlist-lib/scripts
          chmod +x *.sh
          ./init_openlist.sh

      - name: Extract OpenList Version Info
        id: openlist_version
        run: |
          # After init_openlist.sh, OpenList backend source is in openlist-lib/ with .git directory removed
          # We need to get version info from the latest remote tag that was cloned
          cd $GITHUB_WORKSPACE/openlist-lib/scripts
          
          # Re-fetch the tag information from remote (since .git was removed by init_openlist.sh)
          GIT_REPO="https://github.com/OpenListTeam/OpenList.git"
          OPENLIST_VERSION=$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags $GIT_REPO | tail -n 1 | cut -d'/' -f3)
          
          # Get the commit hash for this tag from remote
          OPENLIST_GIT_COMMIT=$(git ls-remote $GIT_REPO "refs/tags/${OPENLIST_VERSION}" | cut -f1 | cut -c1-7)
          
          # Get frontend version from OpenList-Frontend latest release
          OPENLIST_WEB_VERSION=$(curl -fsSL --max-time 10 "https://api.github.com/repos/OpenListTeam/OpenList-Frontend/releases/latest" | grep "tag_name" | head -n 1 | awk -F ":" '{print $2}' | sed 's/"//g;s/,//g;s/ //g' || echo "rolling")
          
          # Build timestamp
          OPENLIST_BUILT_AT=$(date +'%F %T %z')
          
          echo "openlist_version=${OPENLIST_VERSION}" >> $GITHUB_OUTPUT
          echo "openlist_git_commit=${OPENLIST_GIT_COMMIT}" >> $GITHUB_OUTPUT
          echo "openlist_web_version=${OPENLIST_WEB_VERSION}" >> $GITHUB_OUTPUT
          echo "openlist_built_at=${OPENLIST_BUILT_AT}" >> $GITHUB_OUTPUT
          
          echo "OpenList Backend Version: ${OPENLIST_VERSION}"
          echo "OpenList Git Commit: ${OPENLIST_GIT_COMMIT}"
          echo "OpenList Web Version: ${OPENLIST_WEB_VERSION}"
          echo "Built At: ${OPENLIST_BUILT_AT}"

  android:
    needs: [version]
    runs-on: ubuntu-latest
    env:
      release_output: "${{ github.workspace }}/build/app/outputs/apk/release"
      debug_output: "${{ github.workspace }}/build/app/outputs/flutter-apk"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download OpenList Source Code
        run: |
          cd $GITHUB_WORKSPACE/openlist-lib/scripts
          chmod +x *.sh
          ./init_openlist.sh
          ./init_web.sh

      - uses: actions/setup-go@v4
        with:
          go-version: 1.23.4

      - uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r25c

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2.4.2

      - name: Build OpenList
        run: |
          cd $GITHUB_WORKSPACE/openlist-lib/scripts
          chmod +x *.sh
          ./init_gomobile.sh
          ./gobind.sh
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
          OPENLIST_VERSION: ${{ needs.version.outputs.openlist_version }}
          OPENLIST_WEB_VERSION: ${{ needs.version.outputs.openlist_web_version }}
          OPENLIST_BUILT_AT: ${{ needs.version.outputs.openlist_built_at }}
          OPENLIST_GIT_COMMIT: ${{ needs.version.outputs.openlist_git_commit }}
          OPENLIST_GIT_AUTHOR: The OpenList Projects Contributors <noreply@openlist.team>

      - name: Upload AAR
        uses: actions/upload-artifact@v4
        with:
          name: "OpenList"
          path: "${{ github.workspace }}/android/app/libs/*.aar"

      - name: Init Signature (Release only)
        if: github.event_name != 'pull_request'
        run: |
          touch local.properties
          cd android
          echo ALIAS_NAME='${{ secrets.ALIAS_NAME }}' >> local.properties
          echo ALIAS_PASSWORD='${{ secrets.ALIAS_PASSWORD }}' >> local.properties
          echo KEY_PASSWORD='${{ secrets.KEY_PASSWORD }}' >> local.properties
          echo KEY_PATH='./key.jks' >> local.properties
          # 从Secrets读取无换行符Base64解码, 然后保存到到app/key.jks
          echo ${{ secrets.KEY_STORE }} | base64 --decode > $GITHUB_WORKSPACE/android/app/key.jks

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.7'

      - name: Free Disk Space
        uses: jlumbroso/free-disk-space@main
        with:
          # Keep tool cache to preserve Java, Go, Flutter installations
          tool-cache: false
          # Keep Android SDK as we need it for building
          android: false
          # Remove .NET runtime to save space
          dotnet: true
          # Remove Haskell runtime to save space
          haskell: true  
          # Remove large packages like Chrome, Firefox, etc.
          large-packages: true
          # Remove Docker images to save space
          docker-images: true
          # Remove swap storage to save space
          swap-storage: true

      - name: Additional Cleanup (Preserve Java)
        run: |
          echo "Before additional cleanup:"
          df -h
          # Remove specific large directories while preserving Java
          sudo rm -rf /opt/hostedtoolcache/Python* 2>/dev/null || true
          sudo rm -rf /opt/hostedtoolcache/node* 2>/dev/null || true
          sudo rm -rf /opt/hostedtoolcache/Ruby* 2>/dev/null || true
          sudo rm -rf /opt/hostedtoolcache/PyPy* 2>/dev/null || true
          sudo rm -rf /opt/hostedtoolcache/CodeQL* 2>/dev/null || true
          sudo rm -rf /imagegeneration 2>/dev/null || true
          sudo rm -rf /opt/az 2>/dev/null || true
          # Clean APT cache
          sudo apt-get clean || true
          echo "After additional cleanup:"
          df -h
      
      - name: Verify Flutter and Android environment
        run: |
          echo "=== Flutter Environment ==="
          flutter --version
          flutter doctor -v
          echo "=== Android Environment ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT" 
          echo "JAVA_HOME: $JAVA_HOME"
          ls -la $ANDROID_HOME/build-tools/ || echo "build-tools not found"
          echo "=== Disk Space ==="
          df -h
      
      - name: Debug - Check build directory
        run: |
          echo "Checking build directory structure..."
          ls -la build/ || echo "build directory not found"
          ls -la build/app/ || echo "build/app directory not found"
          ls -la build/app/outputs/ || echo "build/app/outputs directory not found"
      
      - name: Build Release APK
        if: github.event_name != 'pull_request'
        env:
          BUILD_VERSION_NAME: ${{ needs.version.outputs.version_name }}
        run: flutter build apk --split-per-abi --release --target-platform android-arm,android-arm64,android-x64
      
      - name: Build Debug APK
        if: github.event_name == 'pull_request'
        env:
          BUILD_VERSION_NAME: ${{ needs.version.outputs.version_name }}
        run: flutter build apk --split-per-abi --debug --target-platform android-arm,android-arm64,android-x64
        
      - name: Debug - Check APK files
        run: |
          echo "Checking for APK files..."
          find build/ -name "*.apk" -type f || echo "No APK files found"
          ls -la build/app/outputs/flutter-apk/ || echo "Flutter APK directory not found"
          ls -la build/app/outputs/apk/release/ || echo "Release directory not found"
          ls -la build/app/outputs/apk/debug/ || echo "Debug directory not found"
          echo "Expected architectures: ARM64 (arm64-v8a), ARM (armeabi-v7a), and x86_64"
          ls -la build/app/outputs/apk/debug/ || echo "Debug directory not found"

      - name: Upload missing_rules.txt
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: "missing_rules"
          path: "${{ github.workspace }}/build/app/outputs/mapping/release/missing_rules.txt"

      - name: Set Build Paths and Version
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            OUTPUT_DIR="${{ env.debug_output }}"
            BUILD_TYPE="debug"
            echo "ver_name=${{ needs.version.outputs.version_name }}-debug" >> $GITHUB_ENV
          else
            OUTPUT_DIR="${{ env.release_output }}"
            BUILD_TYPE="release"
            echo "ver_name=${{ needs.version.outputs.version_name }}" >> $GITHUB_ENV
          fi
          
          echo "output_path=$OUTPUT_DIR" >> $GITHUB_ENV
          echo "build_type=$BUILD_TYPE" >> $GITHUB_ENV
          echo "Using version: ${{ needs.version.outputs.version_name }}"

      - name: Upload App To Artifact arm64-v8a
        if: success () || failure ()
        uses: actions/upload-artifact@v4
        with:
          name: "OpenList-Mobile-${{ env.ver_name }}_arm64-v8a"
          path: |
            ${{ env.output_path }}/*arm64-v8a*.apk
            ${{ env.output_path }}/*v8a.apk

      - name: Upload App To Artifact arm-v7a
        if: success () || failure ()
        uses: actions/upload-artifact@v4
        with:
          name: "OpenList-Mobile-${{ env.ver_name }}_arm-v7a"
          path: |
            ${{ env.output_path }}/*armeabi-v7a*.apk
            ${{ env.output_path }}/*v7a.apk

      - name: Upload App To Artifact x86_64
        if: success () || failure ()
        uses: actions/upload-artifact@v4
        with:
          name: "OpenList-Mobile-${{ env.ver_name }}_x86_64"
          path: |
            ${{ env.output_path }}/*x86_64*.apk
            ${{ env.output_path }}/*x64*.apk

  ios:
    needs: [version]
    runs-on: macos-latest
    env:
      output: "${{ github.workspace }}/build/ios/ipa"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-go@v4
        with:
          go-version: 1.23.4

      - name: Download OpenList Source Code
        run: |
          cd $GITHUB_WORKSPACE/openlist-lib/scripts
          chmod +x *.sh
          echo "Initializing OpenList..."
          ./init_openlist.sh
          echo "Initializing Web assets for iOS..."
          ./init_web_ios.sh

      - name: Verify Go Installation
        run: |
          which go
          go version
          echo "GOPATH: $GOPATH"
          echo "GOROOT: $GOROOT"

      - name: Build OpenList for iOS
        run: |
          cd $GITHUB_WORKSPACE/openlist-lib/scripts
          chmod +x *.sh
          echo "Initializing gomobile for iOS..."
          ./init_gomobile.sh
          echo "Checking Go mobile installation..."
          go list -m golang.org/x/mobile 2>/dev/null || echo "mobile module not found"
          which gomobile || echo "gomobile not in PATH"
          which gobind || echo "gobind not in PATH"
          echo "Checking openlistlib directory..."
          ls -la ../openlistlib/ || echo "openlistlib directory not found"
          echo "Checking for problematic imports..."
          if [ -d ../openlistlib ]; then
            echo "Go files in openlistlib:"
            ls -la ../openlistlib/*.go 2>/dev/null || echo "No Go files found"
            echo "Checking imports:"
            grep -r "golang.org/x/mobile/bind" ../openlistlib/ 2>/dev/null || echo "No bind imports found"
          fi
          echo "Building iOS framework..."
          ./gobind_ios.sh
        env:
          OPENLIST_VERSION: ${{ needs.version.outputs.openlist_version }}
          OPENLIST_WEB_VERSION: ${{ needs.version.outputs.openlist_web_version }}
          OPENLIST_BUILT_AT: ${{ needs.version.outputs.openlist_built_at }}
          OPENLIST_GIT_COMMIT: ${{ needs.version.outputs.openlist_git_commit }}
          OPENLIST_GIT_AUTHOR: The OpenList Projects Contributors <noreply@openlist.team>

      - name: Upload iOS Framework
        uses: actions/upload-artifact@v4
        with:
          name: "OpenList-iOS"
          path: "${{ github.workspace }}/ios/Frameworks/*.xcframework"

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.7'

      - name: Build iOS App
        env:
          BUILD_VERSION_NAME: ${{ needs.version.outputs.version_name }}
        run: |
          flutter build ios --release --no-codesign

      - name: Create IPA
        run: |
          mkdir -p ${{ env.output }}
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload/
          zip -r ${{ env.output }}/OpenList-Mobile.ipa Payload/

      - name: Set iOS Version
        run: |
          # Use unified version from version job
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "ver_name=${{ needs.version.outputs.version_name }}-debug" >> $GITHUB_ENV
          else
            echo "ver_name=${{ needs.version.outputs.version_name }}" >> $GITHUB_ENV
          fi
          echo "Using iOS version: ${{ needs.version.outputs.version_name }}"

      - name: Upload iOS App To Artifact
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: "OpenList-Mobile-iOS-${{ env.ver_name }}"
          path: "${{ env.output }}/OpenList-Mobile.ipa"
